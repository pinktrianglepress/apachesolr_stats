<?php
// $Id$

/**
 * @file
 *   Keeps and reports statistics about Apache Solr usage and performance.
 *
 */

/**
 * Implementation of hook_menu().
 */
function apachesolr_stats_menu() {
  return array(
    'admin/settings/apachesolr/stats' => array(
      'title'            => 'Statistics',
      'description'      => 'Apache Solr Statistics settings to measure usage and performance.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('apachesolr_stats_admin'),
      'access arguments' => array('administer search'),
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/reports/apachesolr/stats' => array(
      'title'            => 'Statistics',
      'description'      => 'Report of Apache Solr usage and performance.',
      'page callback'    => 'apachesolr_stats_report',
      'page arguments'   => array(),
      'access arguments' => array('administer search'),
      'type' => MENU_LOCAL_TASK,
    ),
    'apachesolr_stats/gadget' => array(
      'title' => 'Apache Solr Google Gadget',
      'page callback' => 'apachesolr_stats_report_gadget',
      'description'      => 'Provides content for Google Gadget.',
      'page arguments'   => array(),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'apachesolr_stats/element/%/%/%' => array(
      'title' => 'Apache Solr Google Gadget Elements',
      'page callback' => 'apachesolr_stats_report_gadget_element',
      'description'      => 'Provides content for Google Gadget.',
      'page arguments'   => array(2,3,4),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Build the settings form.
 */
function apachesolr_stats_admin() {
  $form = array();

  $form['tip'] = array(
    '#type' => 'markup',
    '#value' => t('You can also visit the !reportlink.',
    array('!reportlink' => l(t('report page'), 'admin/reports/apachesolr/stats'))),
  );
  $options = array('1' => t('Enabled'), '0' => t('Disabled'));
  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apache Solr query log settings')
  );

  $form['access']['apachesolr_stats_enabled'] = array(
    '#type' => 'radios',
    '#title' => t('Enable access log'),
    '#default_value' => variable_get('apachesolr_stats_enabled', 0),
    '#options' => $options,
    '#description' => t('Log each query to Apache Solr.')
  );

  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');
  $form['access']['apachesolr_stats_flush_log_timer'] = array(
    '#type' => 'select',
    '#title' => t('Discard query logs older than'),
    '#default_value'   => variable_get('apachesolr_stats_flush_log_timer', 259200),
    '#options' => $period,
    '#description' => t('Older query log entries will be automatically discarded. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status')))
  );
  $form['gadget'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Gadget settings'),
    '#description' => t('You can embed statistics displays via Google Gadget by configuring the setting below.')
  );
  $key = variable_get("apachesolr_stats_gadget_key", "");
  $form['gadget']['apachesolr_stats_gadget_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Gadget secret key'),
    '#description' => t("Enter a string that will be embedded in the Gadget URL. Leave empty to disable. WARNING: changing this setting will deactivate all installed gadgets; users can re-enable them by entering the new key in their gadget's preferences."),
    '#default_value' => $key,
  );
  if ($key) {
    $gadget_url = url("apachesolr_stats/gadget/{$key}", array('absolute' => TRUE));
    $gadget_embed_url = 'http://fusion.google.com/add?source=atgs&moduleurl=' . urlencode($gadget_url);
    $gadget_embed_html = "<a href='{$gadget_embed_url}'><img src='http://buttons.googlesyndication.com/fusion/add.gif' border='0' alt='Add to Google'></a>";
    $form['gadget']['embed_link'] = array(
      '#type' => 'markup',
      '#value' =>
        t('The gadget is currently available at these URLs:')
        . '<ul><li>' . l(t('Source'), $gadget_url)
        . '<li>' . l(t('Embed'), $gadget_embed_url) . ' ' . $gadget_embed_html . '</ul>',
    );
  }
  return system_settings_form($form);
}

/**
 * Implementation of hook_apachesolr_modify_query().
 *
 * Adds debugQuery parameter to Solr call that returns processing time, etc.
 */
function apachesolr_stats_apachesolr_modify_query(&$query, &$params, $caller) {
  if (variable_get('apachesolr_stats_enabled', 0)) {
    // Add the debug query argument.
    // See: http://wiki.apache.org/solr/CommonQueryParameters#head-f45a9396425956a4db8d6478ed6029adfb7b0858
    if ($caller == 'apachesolr_search') {
      $params['debugQuery'] = 'true';
    }
  }
}

/**
 * Implementation of hook_exit().
 *
 * This is the spot where actual logging takes place.
 */
function apachesolr_stats_exit() {
  if (!variable_get('apachesolr_stats_enabled', 0)) {
    return;
  }
  // Apparently there can be cases where some modules aren't loaded.
  if (! function_exists('apachesolr_has_searched')) {
    return;
  }

  global $user;
  if (! apachesolr_has_searched()) {
    return;
  }
  $response = apachesolr_static_response_cache();
  $query = apachesolr_current_query();
  $url_queryvalues = $query->get_url_queryvalues();

  db_query("INSERT INTO {apachesolr_stats}
    (timestamp, uid, sid, numfound, showed_suggestions, total_time, prepare_time, process_time, page, keywords, filters, sort, params)
    VALUES
    (%d, %d, '%s', %d, %d, %d, %d, %d, '%s', '%s','%s','%s','%s')",
    time(),
    $user->uid,
    session_id(),
    $response->response->numFound,
    (int) get_object_vars($response->spellcheck->suggestions),
    $response->debug->timing->time,
    $response->debug->timing->prepare->time,
    $response->debug->timing->process->time,
    isset($_GET['page']) ? $_GET['page'] : '',
    $query->get_query_basic(),
    $url_queryvalues['filters'],
    $url_queryvalues['sort'],
    serialize($response->responseHeader->params)
  );

  return;

  /*
  $times = array();
  $times['total']['total'] = $response->debug->timing->time;
  foreach (array('prepare', 'process') as $phase) {
    foreach($response->debug->timing->prepare as $key => $value) {
      if (is_object($value)) {
        $times[$phase][$key] = (int) $value->time;
      } else {
        $times[$phase]['total'] = (int) $value;
      }
    }
  }
  dsm($times);
  return;
  */
}

/**
 * Callback function that outputs an XML description for a Google Gadget
 * and terminates PHP execution.
 * 
 * @see apachesolr_stats_menu()
 */
function apachesolr_stats_report_gadget() {
  $settings_key = variable_get("apachesolr_stats_gadget_key", "");
  if ($settings_key === 0) {
    echo "Invalid request";
    exit;
  }

  $granularities = apachesolr_stats_get_granularities();
  $report_elements = apachesolr_stats_generate_report_elements($granularities["day"]);

  // Generate options
  $element_options = "";
  foreach ($report_elements as $id => $element) {
    $element_options .= "    <EnumValue value=\"{$id}\" display_value=\"{$element[name]}\" />\n";
  }
  $granularity_options = "";
  foreach ($granularities as $granularity => $dummy) {
    $granularity_options .= "    <EnumValue value=\"{$granularity}\" />\n";
  }
  $site_name = variable_get('site_name', '');

  // Send correct header for XML
  header("Content-Type: text/xml");
  // Output the gadget XML description
  echo <<<HEREDOC
<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs
    title="Apache Solr statistics for $site_name"
    author="Alejandro Garza"
    author_email="alejandro.garza@itesm.mx"
    description="Google widget for Drupal Apache Solr Statistics module. More info: http://drupal.org/project/apachesolr_stats"
    screenshot="http://chart.apis.google.com/chart?cht=lc&amp;chs=300x200&amp;chdlp=b&amp;chma=30,100,20,20&amp;chd=s:NlVabjGXUaM&amp;chxp=1,22"
    thumbnail="http://chart.apis.google.com/chart?cht=lc&amp;chs=200x100&amp;chdlp=b&amp;chma=30,100,20,20&amp;chd=s:NlVabjGXUaM&amp;chxp=1,22"
    height="180" >
    <Require feature="dynamic-height"/>
  </ModulePrefs>

  <UserPref name="key" display_name="Access key" required="true" default_value="$settings_key" />
  <UserPref name="element" display_name="Element to show" default_value="total_queries_per" datatype="enum" >
  $element_options
  </UserPref>
  <UserPref name="granularity" display_name="Granularity" default_value="day" datatype="enum" >
  $granularity_options
  </UserPref>

  <Content type="html"><![CDATA[
    <div id="content_div">Loading...</div>
    <script type="text/javascript">
      function getHtml() {
        var params = {};
        var prefs = new gadgets.Prefs();
        var element = prefs.getString("element");
        var granularity = prefs.getString("granularity");
        var key = prefs.getString("key");
        var rand = Math.floor(Math.random()*9999)

        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.TEXT;
        var url = "http://khub.itesm.mx/apachesolr_stats/element/" + granularity + "/" + element + "/" + key + "?" + rand;
        gadgets.io.makeRequest(url, response, params);
      };
      function response(obj) {
        //obj.text contains the text of the page that was requested
        document.getElementById('content_div').innerHTML = obj.text;
        setTimeout("gadgets.window.adjustHeight()", 1000);
      };

      gadgets.util.registerOnLoadHandler(getHtml);
    </script>
  ]]>
  </Content>
</Module>
HEREDOC;
  exit;
}

/**
 * Callback function used by Gadget javascript to fetch a particular element.
 *
 * @param string $requested_granularity
 *  Granularity of report to use.
 * @param string $requested_element
 *  ID of report element to return.
 * @param string $requested_key
 *  Secret key given by gadget.
 * @see apachesolr_stats_menu()
 */
function apachesolr_stats_report_gadget_element($requested_granularity, $requested_element, $requested_key) {
  $granularities = apachesolr_stats_get_granularities();
  $settings_key = variable_get("apachesolr_stats_gadget_key", "");
  if ($settings_key === 0) {
    echo "Invalid request: no local key set";
    exit;
  }
  if ($settings_key != $requested_key) {
    echo "Invalid request: invalid key $requested_key";
    exit;
  }
  if (empty($granularities[$requested_granularity])) {
    echo "Invalid request: bad granularity $requested_granularity";
    exit;
  }

  $report_elements = apachesolr_stats_generate_report_elements($granularities[$requested_granularity]);
  foreach ($report_elements as $id => $report_element) {
    if ($id == $requested_element) {
      echo $report_element['name'] . "<br />\n";
      $value = $report_element['value'];
      $value = str_replace('&', '&amp;', $value);
      echo "<div>{$value}</div>\n";
      exit;
    }
  }
  echo "Invalid request: bad element $requested_element";
  exit;
}

/**
 * Callback for admin/reports/apachesolr/stats.
 * @param string $granularity
 *   Granularity to use for report.
 * @return string
 *   The page output as HTML.
 * @see apachesolr_stats_menu()
 */
function apachesolr_stats_report($picked_granularity = "hour") {
  drupal_set_title(t("Apache Solr statistics report"));
  if (! variable_get('apachesolr_stats_enabled', 0)) {
    return t('Logging is disabled in the !link. Enable it to log Apache Solr queries.', array('!link' => l('module configuration page', 'admin/settings/apachesolr/stats')));
  }

  $granularities = apachesolr_stats_get_granularities();

  // Decide what granularity to use: minute, hour or day
  // Check if given argument exists; if not, reset to "hour"
  if (!$granularities[$picked_granularity]) {
    $picked_granularity = "hour";
  }
  $granularity = $granularities[$picked_granularity];

  // Process latest log entries
  $report_elements = apachesolr_stats_generate_report_elements($granularity);

  // Create the output HTML:::::::::::::::::::::::::::::::::::::
  // Granularity picker:
  $output = "<div class='granularity'>" . t('Choose the aggregation time span for the report:');
  foreach ($granularities as $name => $granularity) {
    $output .= " &nbsp; ";
    if ($name != $picked_granularity) {
      $output .= l($granularity["name"], "admin/reports/apachesolr/stats/$name");
    } else {
      $output .= "<strong>" . $granularity["name"] . "</strong>";
    }
  }
  $output .= "</div><hr>";

  if ($report_elements) {
    // Report description
    $output .= t('This is an overview of Apache Solr usage and performance since @startdate.', array('@startdate' => format_date($earliest_timestamp)));

    // Add Google Gadgets embedding link
    $key = variable_get("apachesolr_stats_gadget_key", "");
    if ($key) {
      $gadget_url = url("apachesolr_stats/gadget/{$key}", array('absolute' => TRUE));
      $gadget_embed_html = '<a href="http://fusion.google.com/add?source=atgs&moduleurl=' . urlencode($gadget_url) . '"><img src="http://buttons.googlesyndication.com/fusion/add.gif" border="0" alt="' . t('Add to Google') . '"></a>';
      $output .= "<div style='text-align:right'>" . l(t('Embed as Google Gadget'), "http://www.google.com/ig/adde?moduleurl=" . urlencode($gadget_url)) . " {$gadget_embed_html}</p>";
    }

    // Render report elements
    foreach ($report_elements as $id => $data) {
      // Table data
      $rows[] = array(
              "data" => array(
                      array('data' => $data['name'], 'header' => true, 'style' => 'width:33%'),
                      array('data' => $data['value']),
              )
      );
    }
    $output .= theme('table', array(), $rows);
  } else {
    drupal_set_message(t('There is not enough stored data to build a report.'));
  }

  return $output;
}

/**
 * Generate an IMG tag with the URL to generate a chart using Google Charts API.
 *
 * @param string $granularity
 *    The granularity to use.
 * @param array $data
 *    The array of data to chart.
 * @param integer $start_timeslot
 *    The index of the first data element to chart.
 * @param integer $last_timeslot
 *    The index of the first data element to chart.
 * @param integer $total_queries
 *    Integer with the total number of queries included in this chart.
 * @param boolean $average
 *    Boolean flag: show an average value in the chart.
 */
function apachesolr_stats_chart($granularity, $data, $start_timeslot, $last_timeslot, $total_queries, $average = FALSE) {
  // Sample: http://chart.apis.google.com/chart?cht=lc&chs=350x100&chdlp=b&chma=10,10,10,10&chd=s:[encoded chart data]
  $chart_prefix = 'http://chart.apis.google.com/chart?cht=lc&chs=350x100';
  $chart_prefix .= '&chdlp=b&chma=30,100,20,20&chd=s:';
  $chd = array();
  $chd_min = 9999999;
  $chd_max = 0;
  $total = 0;
  for ($t = $start_timeslot; $t<=$last_timeslot; $t++) {
    $num = $data[$t]+0;
    $chd_min = ($chd_min > $num) ? $num : $chd_min;
    $chd_max = ($chd_max < $num) ? $num : $chd_max;
    $chd[] = $num;
  }
  $chd = array_reverse($chd);
  if ($count > 0) {
    $chd_avg = $total / $count;
  } else {
    $chd_avg = $num;
  }

  // Generate basic image URL
  $image_url = $chart_prefix . apachesolr_stats_encodedata($chd, $chd_min, $chd_max);

  // Add labels
  $chxl = "";
  if ($chd_max > 0) {
    $chxl .= "0:|". intval($chd_min) ."|". intval($chd_max);

    // Show average value in a label
    if ($average !== FALSE) {
      $image_url .= "&chxp=1," . intval($average / $chd_max * 100);
      $chxl .= sprintf("|1:|%s=%.2f", t('average'), $average);
      $chxt = "y,r";
    } else {
      $chxt = "y";
    }

    // Add time/date labels
    $earliest_timestamp = $start_timeslot * $granularity['timespan'];
    $last_timestamp = $last_timeslot * $granularity['timespan'];
    $mid_timestamp = ($last_timestamp + $earliest_timestamp) / 2;
    $time_msg_1 = drupal_urlencode(strftime($granularity['format'], $earliest_timestamp));
    $time_msg_2 = drupal_urlencode(strftime($granularity['format'], $mid_timestamp));
    $time_msg_3 = drupal_urlencode(strftime($granularity['format'], $last_timestamp));
    if ($chxt) {
      $chxt = "{$chxt},x";
      $chxl .= "|2:|{$time_msg_1}|{$time_msg_2}|{$time_msg_3}";
    } else {
      $chxt = "x";
      $chxl .= "|1:|{$time_msg_1}|{$time_msg_2}|{$time_msg_3}";
    }

    $image_url .= "&chxl={$chxl}&chxt={$chxt}";
  }

  // Return the image tag
  return "<img src='$image_url' />";
}

/**
 * Encode data using Chart's simple encoding.
 * See http://code.google.com/apis/chart/formats.html#simple
 *
 * @param array $chd
 *   an array of integer values to encode.
 * @param integer $chd_min
 *   an integer with the smallest value to encode.
 * @param integer $chd_max
 *   an integer with the greatest value to encode.
 * @return string
 *   a string representing the Google Charts API simple encoding of the data.
 */
function apachesolr_stats_encodedata($chd, $chd_min, $chd_max) {
  $encoder_string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  $encoded_values = '';
  if (is_array($chd)) {
    foreach ($chd as $value) {
      $encoded_values .= substr($encoder_string, (($value-$chd_min) / $chd_max)*61, 1);
    }
  }
  return $encoded_values;
}

/**
 * Implementation of hook_cron().
 *
 * Remove expired log messages.
 */
function apachesolr_stats_cron() {
  db_query('DELETE FROM {apachesolr_stats} WHERE timestamp < %d', time() - variable_get('apachesolr_stats_flush_log_timer', 604800));
}

/**
 * Implementation of apachesolr_search_result_alter().
 */
/* TODO: change results here to track clickthrus?
function apachesolr_stats_apachesolr_search_result_alter($doc) {
  dsm($doc);
}
*/

/**
 * Determine the facet field from a word: im_vid_XX, kw or XXX (anything before ":", like tid, uid, etc)
 * @return string
 *   The facet field id.
 */
function apachesolr_stats_determine_field_from_query($facets, $word) {
  if (strpos($word, ":") !== false) {
    list($fieldname, $value) = explode(":", $word);
    if ($fieldname == "tid") {
      // Replace tid with the correct facet field name (im_vid_XXX) where XXX = vid
      $term = taxonomy_get_term(intval(substr($word, 4)));
      $fieldname = "im_vid_" . $term->vid;
    } else {
      // Check if $fieldname is really a facet, if not count as keyword
      if (empty($facets[$fieldname])) {
        $fieldname = false;
      }
    }
  } else {
    // No ":" found, so it's a keyword
    $fieldname = false;
  }
  return $fieldname;
}

/**
 * Returns a themed table for facet usage
 * @param array $facets
 *   An array of calculated data to report.
 * @return string
 *   HTML for a themed table containing the report data.
 */
function apachesolr_stats_facet_usage_table($facets) {
  // Report usage in table
  $header = array(
          array('data' => 'Facet ID', 'Xfield' => 'id', 'sort' => 'asc'),
          array('data' => 'Facet info', 'Xfield' => 'info', 'sort' => ''),
          array('data' => 'Queries containing this facet', 'Xfield' => 'queries', 'sort' => ''),
          #array('data' => 'Clickthrus from queries containing this facet', 'Xfield' => 'ct', 'sort' => ''),
          #array('data' => 'Clickthru rate for facet', 'Xfield' => 'ctp', 'sort' => ''),
  );
  foreach($facets as $fieldname => $facet) {
    $rows[$fieldname][] = $fieldname;
    $rows[$fieldname][] = $facet['info'];
    $rows[$fieldname][] = $facet['usage'];
    #$rows[$fieldname][] = $facet['clickthru'];
    #if ($facet['usage']>0) {
    #  $rows[$fieldname][] = sprintf("%2.1f%%", ($facet['clickthru'] / $facet['usage'])*100);
    #}
  }
  $output = theme('table', $header, $rows);
  return $output;
}

/**
 * Returns the <img> tag for a Google chart with the facet usage
 *
 * @param array $facets
 *   An array of calculated data to report.
 * @return string
 *   HTML for an IMG tag to a Google chart.
 */
function apachesolr_stats_facet_usage_graph($facets) {
  // Chart for field usage
  $leyends = array();
  $data = array();
  $label_cutoff = 40;
  foreach($facets as $fieldname => $facet) {
    $leyend = preg_replace("/^.*ilter by /", "", $facet['info']);
    if (strlen($leyend) > $label_cutoff) {
      $leyend = substr($leyend, 0, $label_cutoff) . "...";
    }
    $leyends[] = drupal_urlencode($leyend);
    $data[] = $facet['usage'];
  }
  $chd = apachesolr_stats_encodedata($data, 0, $facets['any']['usage']);
  // array_reverse() in next line due to apachesolr_stats_encodedata() encoding data backwards
  $chl = implode('|', array_reverse($leyends));
  $height = 30 + sizeof($leyends) * 28;
  // Percentage labels
  $chm = "N*f0*%,000000,0,-1,11";
  $chart = "<img src='http://chart.apis.google.com/chart?chxt=y&cht=bhs&chma=20,20,20,20&chd=s:{$chd}&chs=350x{$height}&chds=0,{$total_queries}&chxl=0:|{$chl}&chm={$chm}' />";
  return $chart;
}

/**
 * Returns the facet array to report on.
 */
function apachesolr_stats_get_facets() {
  $all_facets = module_invoke_all('apachesolr_facets');
  // Keep only those enabled according to apachesolr_get_enabled_facets()
  $facets = array();
  foreach (apachesolr_get_enabled_facets() as $module => $enabled) {
    foreach ($enabled as $facet_id) {
      $facets[$facet_id] = $all_facets[$facet_id];
    }
  }

  // Add some "virtual" facets to report on.
  $facets['kw'] = array(
          'facet_field' => 'kw',
          'info' => 'Keyword search',
  );
  $facets['any'] = array(
          'facet_field' => 'any',
          'info' => '[All queries including any filter and/or keywords]',
  );
  /*
  $facets['none'] = array(
    'facet_field' => 'none',
    'info' => '[Clickthrus with no previous queries]',
  );
  */
  return $facets;
}

/**
 * Returns an array of preset granularities.
 * @return array
 *   an array of preset granularities for reports.
 */
function apachesolr_stats_get_granularities() {
  $granularities = array(
          'minute' => array(
                  'name' => t('minute'),
                  'timespan' => 60,
                  'time_before' => 60*60*24, // One day before
                  'format' => '%H:%M',
          ),
          'hour' => array(
                  'name' => t('hour'),
                  'timespan' => 60*60,
                  'time_before' => 60*60*24*7, // One week before
                  'format' => '%m/%d %H:%M',
          ),
          'day' => array(
                  'name' => t('day'),
                  'timespan' => 60*60*24,
                  'time_before' => 60*60*24*7*3, // 3 weeks before
                  'format' => '%m/%d',
          ),
  );
  return $granularities;
}

/**
 * Generates report elements for the given granularity.
 *
 * @param string $granularity
 *  Timespan to aggregate report by. Possible values: 'minute', 'hour' or 'day'
 * @return array
 *  An indexed array with the report elements; each element is an array with
 *  the indexes:
 *    'name'  => human-readable name of the element, e.g. "Total queries"
 *    'value' => html with the result. Can be an image, a number, etc.
 */
function apachesolr_stats_generate_report_elements($granularity) {
  // Initialize
  $facets = apachesolr_stats_get_facets();
  $suggestions = 0;
  $queries = 0;
  $users = array();
  $sessions = array();
  $start_timeslot = 0;
  $last_timeslot = 0;
  $time['max'] = -1;
  $time['min'] = 9999.999;
  $report_elements = array();

  // Scan the logfile and build statistics arrays
  $result = db_query("SELECT * FROM {apachesolr_stats} WHERE timestamp > %d ORDER BY timestamp DESC", time()- $granularity['time_before']);
  while ($record = db_fetch_object($result)) {
    $timeslot = intval($record->timestamp / $granularity['timespan']);
    if ($last_timeslot == 0) {
      $last_timeslot = $timeslot;
    }
    $users[$record->uid]++;
    $sessions[$record->sid]++;
    if ($record->suggestions) {
      $suggestions++;
    }
    $total_requests++;
    $time['total'] += $record->total_time;
    // $time['prepare'] += $record->prepare_time;
    // $time['process'] += $record->process_time;

    // Track max and min response times
    $time['max'] = ($time['max'] < $record->total_time ? $record->total_time : $time['max']);
    $time['min'] = ($time['min'] > $record->total_time ? $record->total_time : $time['min']);

    // Field usage; only when on first results page (meaning it's a fresh search)
    if ($record->page == "") {
      unset($facet_processed_flag);
      $ok = preg_match_all('/[^ ]+/', $record->filters, $matches);
      foreach($matches[0] as $word) {
        $fieldname = apachesolr_stats_determine_field_from_query($facets, $word);
        if ($fieldname != false) {
          // Count this facet field only once per query
          if ($facet_processed_flag[$fieldname] != true) {
            // Add 1 to usage of term from vocabulary
            $facets[$fieldname]['usage']++;
            // Mark so we don't count it again for this query
            $facet_processed_flag[$fieldname] = true;
          }
        }

        if (trim($record->keywords) != "") {
          if ($facet_processed_flag['kw'] != true) {
            $facets['kw']['usage']++;
            $facet_processed_flag['kw'] = true;
          }
        }
      }
      // Count each unique query
      $facets["any"]['usage']++;

      // Keep track of how many fields were active per query
      $simultaneous_fields[sizeof($facet_processed_flag)]++;

      $total_queries++;
    }

    // Sort usage; count only the first page of results
    if ($record->page == "") {
      $sort_usage[($record->sort) ? $record->sort : "relevance"]++;
    }

    // Group some stats into timeslots (minutes, hours) to show trends
    if (empty($user_slot[$record->uid][$timeslot])) {
      $data_per_granularity['users_per_slot'][$timeslot]++;
      $user_slot[$record->uid][$timeslot] = TRUE;
    }
    $data_per_granularity['queries'][$timeslot]++;
    $count_per_granularity[$timeslot]++;
    $data_per_granularity['total_time'][$timeslot] += $record->total_time;
  }
  $start_timeslot = $timeslot;
  $earliest_timestamp = $start_timeslot * $granularity['timespan'];

  if (sizeof($sessions) == 0 || sizeof($users) == 0 || $total_queries == 0) {
    return array();
  }

  $report_elements['queries'] = array('name' => t('Queries'), 'value' => $total_queries);
  $report_elements['spellchecker'] = array('name' => t('Spellchecker suggestions'), 'value' => $suggestions);
  $report_elements['unique_sessions'] = array('name' => t('Unique sessions'), 'value' => sizeof($sessions));
  $report_elements['unique_users'] = array('name' => t('Unique users'), 'value' => sizeof($users));
  $report_elements['avg_queries_user'] = array('name' => t('Average queries per user'), 'value' => sprintf("%.1f", $total_queries / sizeof($users)));
  $report_elements['avg_queries_session'] = array('name' => t('Average queries per session'), 'value' => sprintf("%.1f", $total_queries / sizeof($sessions)));
  $report_elements['solr_response_time'] = array('name' => t('Solr service response time per query'), 'value' => sprintf("%s: %.3f sec / %s: %.3f sec / %s: %.3f sec", t('Average'), $time['total'] / $total_queries / 1000, t('Maximum'), $time['max'] / 1000, t('Minimum'), $time['min'] / 1000));
  
  // Chart for queries per timeslot
  $chart = apachesolr_stats_chart($granularity, $data_per_granularity['queries'], $start_timeslot, $last_timeslot, $total_queries, $total_queries / ($last_timeslot-$start_timeslot+1));
  $report_elements['total_queries_per'] = array('name' => t('Total queries, by @granularity', array('@granularity' => $granularity['name'])), 'value' => $chart);

  // Chart for average time per timeslot
  $data = array();
  foreach ($data_per_granularity['total_time'] as $timeslot => $value) {
    $data[$timeslot] = $value / $count_per_granularity[$timeslot];
  }
  // Call with average_empty = FALSE
  $chart = apachesolr_stats_chart($granularity, $data, $start_timeslot, $last_timeslot, $total_queries, $time['total'] / $total_queries);
  $report_elements['query_avg_time'] = array('name' => t('Average time per query, by @granularity (miliseconds)', array('@granularity' => $granularity['name'])), 'value' => $chart);

  // Chart for users per timeslot
  $chart = apachesolr_stats_chart($granularity, $data_per_granularity['users_per_slot'], $start_timeslot, $last_timeslot, $total_queries, sizeof($users) / ($last_timeslot-$start_timeslot+1));
  $report_elements['total_users_per'] = array('name' => t('Total unique users executing queries, by @granularity', array('@granularity' => $granularity['name'])), 'value' => $chart);

  // Chart for field usage
  $report_elements['field_usage'] = array('name' => t('Field usage', array('@granularity' => $granularity['name'])), 'value' => apachesolr_stats_facet_usage_graph($facets));

  // Chart for sort usage
  $leyends = array();
  foreach ($sort_usage as $key => $value) {
    $leyends[] = drupal_urlencode($key);
  }
  $chl = implode('|', $leyends);
  $chd = implode(',', $sort_usage);
  $chart = "<img src='http://chart.apis.google.com/chart?cht=p3&chd=t:{$chd}&chs=350x100&chl={$chl}' />";
  $report_elements['sort_usage'] = array('name' => t('Sort usage', array('@granularity' => $granularity['name'])), 'value' => $chart);

  // Facet usage table
  $report_elements['facet_usage_table'] = array(
          'name' => t('Facet usage detail'),
          'value' => apachesolr_stats_facet_usage_table($facets)
  );

  return $report_elements;
}
